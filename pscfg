#!/bin/bash

#psg

# Truncates string to the provided number of characters
function pstrunc {
    local tgtLen=$1
    local justify=$2
    shift 2
    PSTRUNC="$@"
    if [ $tgtLen -lt ${#PSTRUNC} ]; then
        local pstrlen=${#PSTRUNC}
        if [ "R" == $justify ]; then
            local pstri=$((pstrlen-tgtLen+3))
            PSTRUNC="...${PSTRUNC:pstri}"
        elif [ "L" == $justify ]; then
            tgtLen=$((tgtLen-3))
            PSTRUNC="${PSTRUNC:0:tgtLen}..."
        elif [ "C" == $justify ]; then
            local lhalf=$((tgtLen / 2))
            local pstri=$((pstrlen - lhalf + 1))
            if [ $((lhalf + lhalf)) -eq $tgtLen ]; then
                lhalf=$((lhalf - 2))
            else
                lhalf=$((lhalf - 1))
            fi
            PSTRUNC="${PSTRUNC:0:lhalf}...${PSTRUNC:pstri}"
        fi
    fi

    echo $PSTRUNC
}

# Prints current revision if in an svn repo
function psrev {
    PSREV="$(svn info 2>/dev/null | grep Revision)"
    if [ 0 -ne $? ]; then
        PSREV="N/A"
    else
        PSREV="$(echo $PSREV | awk -F ": " '{ print $2 }')"
    fi

    echo $PSREV
}

# Prints current branch if in a git repo
function psgits {
    local npLen=0
    local gitcomm=
    local gitbranch=
    local upscomm=
    local upsbranch=
    local gCol=""

    gitcomm="$(git rev-parse HEAD 2>/dev/null)"
    if [ ! "$gitcomm" ]; then
        PSGITS="N/A"
    else
        #gitbranch="$(git symbolic-ref --short HEAD 2>/dev/null)"
        gitbranch="$(git symbolic-ref HEAD 2>/dev/null)"
        gitbranch="${gitbranch##refs/heads/}"
        if [ "$gitbranch" ]; then
            PSGITS="$gitbranch"
            upsbranch="$(git rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null)"
            if [ "0" -eq "$?" ]; then
                upscomm="$(git rev-parse $upsbranch)"
                if [ "$gitcomm" != "$upscomm" ]; then
                    if [ "$(git rev-list $gitbranch | grep $upscomm)" ]; then
                        PSGITS="+$PSGITS"
                    elif [ "$(git rev-list $upsbranch | grep $gitcomm)" ]; then
                        PSGITS="-$PSGITS"
                    else
                        PSGITS="~$PSGITS"
                    fi
                fi
            fi
        else
            PSGITS=${gitcomm:0:7}
        fi

        if [ "$(git ls-files --other --exclude-standard 2>/dev/null)" ]; then
            PSGITS="$PSGITS*"
        fi

        if [ "$(git diff --cached --name-only 2>/dev/null)" ]; then
            gCol='\e[33m'
        elif [ "$(git diff --name-only 2>/dev/null)" ]; then
            gCol='\e[31m'
        else
            gCol='\e[32m'
        fi
        npLen=6 #${#gCol}
    fi

    printf "%s%s" "$gCol" "$PSGITS"

    return $npLen
}

# Prints current branch if in a git repo
function psbranch {
    PSBRANCH="$(git symbolic-ref HEAD 2>/dev/null)"
    if [ 0 -ne $? ]; then
        PSBRANCH="N/A"
    else
        PSBRANCH=${PSBRANCH##refs/heads/}
    fi

    echo $PSBRANCH
}

# Prints % battery left and indicates whether charging or not
function psbatt {
    local npLen=0
    local bCol=""

    which acpi &> /dev/null
    if [ 0 -eq $? ]; then
        PSBATT=`acpi -b | awk -F "(: |, )" '{
                if("Discharging" == $2)
                    print "-"$3;
                else if ("Charging" == $2)
                    print "+"$3;
                else
                    print $3}'`
        if [ "-" == ${PSBATT:0:1} ]; then
            bCol='\e[31m'
        else
            bCol='\e[32m'
        fi
        npLen=${#bCol}
    else
        PSBATT="No APCI"
    fi

    printf "%s%s" "$bCol" "$PSBATT"

    return $npLen
}

LASTST=$1
LASTCMD=$2
TERMWID=$(tput cols)

BOLD='\e[1m'
CLEAR='\e[0m'
WHT='\e[37m'
if [ "$USER" == root ]; then
    ACCENT='\e[31m' # Accent color, RED
else
    ACCENT='\e[36m' # Accent color, CYAN
fi

DASH="\xe2\x94\x80"

FMT="${BOLD}${ACCENT}"

npclen=0
titlebar=""

fmtl=$((${#DASH} + ${#DASH} + ${#FMT} + ${#FMT} - 2))
function add_str {
    npcl=$1
    shift 1
    titlebar="${titlebar}${FMT}${DASH}( $@${FMT} )${DASH}"
    npclen=$((npclen + npcl + fmtl))
}

# Print time at start of titlebar
add_str 0 "$(date +%T)"


# Add battery status if battery reports and is not 100%,
batts=$(psbatt)
battl=$?
if [ 0 -ne ${battl} ]; then
    add_str $battl "$batts"
fi

# Add use@hostname
add_str 0 "${USER}@$(hostname)"

# Add git branch/status
gits=$(psgits)
gitl=$?
if [ 0 -ne ${gitl} ]; then
    add_str $gitl "$gits"
fi

# Fill up rest of terminal width with truncated last command
cmdl=$((TERMWID - ${#titlebar} + npclen - 6))
add_str 0 "$(pstrunc $cmdl C $LASTCMD)"

printf "%b\n" "${titlebar}"
printf "($(pstrunc 20 R $(pwd)))"
